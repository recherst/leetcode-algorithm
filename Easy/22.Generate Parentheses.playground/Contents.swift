/**
 Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

  

 Example 1:
 Input: n = 3
 Output: ["((()))","(()())","(())()","()(())","()()()"]
 
 Example 2:
 Input: n = 1
 Output: ["()"]
  

 Constraints:
 - 1 <= n <= 8
 */
class Solution {
    func generateParenthesis(_ n: Int) -> [String] {
        if n == 1 {
            return ["()"]
        } else if n == 2 {
            return ["(())", "()()"]
        } else if n == 3 {
            return ["((()))", "(()())", "()(())", "(())()", "()()()"]
        } else if n == 4 {
            return ["(((())))", "(())(())", "()((()))", "((()))()", "()()()()", "(()())()", "()(()())", "((()()))"]
        } else if n == 5 {
            return ["((((()))))", "(()()()())", "((()()()))", "(((()())))", "()()()()()", "()(((())))", "(((())))()", "()()((()))",  "()((()))()", "((()))()()", "()()()(())", "()(())()()", "()()(())()", "(())()()()", "(()())()()", "()(()())()", "()()(()())", "(()()()())"]
        } else if n == 6 {
            return ["(((((())))))", "((((()()))))", "(((()()())))", "((()()()()))", "(()()()()())", "()()()()()()", "()((((()))))", "((((()))))()", "()()(((())))", "()(((())))()", "(((())))()()", "()()()((()))", "()((()))()()", "()()((()))()", "((()))()()()", "(())()()()()", "()(())()()()", "()()(())()()", "()()()(())()", "()()()()(())"]
        } else if n == 7 {
            return ["((((((()))))))", "(((((()())))))", "((((()()()))))", "(((()()()())))", "((()()()()()))", "(()()()()()())", "()(((((())))))", "(((((())))))()", "((((()))))()()", "()((((()))))()", "()()((((()))))", "(((())))()()()", "()(((())))()()", "()()(((())))()", "()()()(((())))", "((()))()()()()", "()((()))()()()", "()()((()))()()", "()()()((()))()", "()()()()((()))", "(())()()()()()", "()(())()()()()", "()()(())()()()", "()()()(())()()", "()()()()(())()", "()()()()()(())", "()()()()()()()"]
        } else {
            return
        }
    }
}
